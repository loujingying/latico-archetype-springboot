# springboot配置，通用配置，yaml格式编写

###########################################################
###########################################################
server:
  servlet:
    multipart:
      max-file-size: 50MB
      max-request-size: 50MB
###########################################################
###########################################################
spring:
  application:
    name: latico-archetype-springboot
  zipkin:
    base-url: http://springcloud-sleuth-zipkin/
    # 默认关闭，不发送
    enabled: false
    #服务跟踪消息收集率，1代表每一条都收集，0.1代表收集百分之10，如果不配置，有个默认的百分比的
  sleuth:
    sampler:
      percentage: 1.0
  cloud:
    inetutils:
      # 忽略指定网卡，支持正则表达式（这里使用正则表达式忽略所有虚拟机网卡）
      ignoredInterfaces:
        - (?i)VMware.*
        - (?i)vir.*
        - (?i).*loopback.*
        - (?i).*Virtual.*
        - 169\..*

      #  mvc:   #静态文件
  #    static-path-pattern: /static/**
  resources:
    static-locations: classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/
  thymeleaf:
    model: HTML5
    prefix: classpath:/templates/
    suffix: .html
  main:
    allow-bean-definition-overriding: true
  ###########################################################
  ###########################################################

  ###########################################################
  ###########################################################
  # Specify the DBMS
  jpa:
    #    database: mysql
    # Show or not log for each sql query
    show-sql: true
    # Hibernate ddl auto (create, create-drop, update)
    generate-ddl: true
    open-in-view: false
    hibernate:
      ddl-auto: update
      # Naming strategy 定义HibernateO/R映射字段的命名策略
      naming-strategy: org.hibernate.cfg.ImprovedNamingStrategy
    # stripped before adding them to the entity manager
    properties:
      hibernate:
        format_sql: true
  #        #        Hibernate的数据库方言。另外还有一些其他jpa配置信息，篇幅有限，可查阅jpa（hibernate）架构基本配置相关。
  #        dialect: org.hibernate.dialect.MySQL5Dialect
  ###########################################################
  ###########################################################
    # 连接超时时间（毫秒）
    timeout: 5000ms
    # 未知原因，哨兵使用lettuce池会无法连接，要使用jedis池
    jedis:
      pool:
        # 连接池最大连接数（使用负值表示没有限制）
        max-active: 20
        # 连接池中的最大空闲连接
        max-idle: 10
        # 连接池中的最小空闲连接
        min-idle: 0
        # 连接池最大阻塞等待时间（使用负值表示没有限制）
        max-wait: 15000ms

  # redis配置
  ###########################################################
  ###########################################################
  ### 数据库配置,如果没有指定驱动，那么springboot会自动智能选择
  # mysql 驱动类 新： com.mysql.cj.jdbc.Driver
  # mysql 驱动类 旧： com.mysql.jdbc.Driver
  # oracle 驱动类 新：oracle.jdbc.OracleDriver
  # oracle 驱动类 旧：oracle.jdbc.driver.OracleDriver
  # mysql URL: jdbc:mysql://127.0.0.1:3306/test?useUnicode=true&characterEncoding=UTF-8&allowMultiQueries=true&useSSL=true&serverTimezone=GMT%2B8&zeroDateTimeBehavior=convertToNull
  # oracle URL: jdbc:oracle:thin:@127.0.0.1:1521:orcl

  #配置数据源
  datasource:
    #    默认数据源，主数据源
    primary:
      name: primary

      #      mysql的查询校验
      #      validation-query: SELECT 'x'
      #      oracle的查询校验
      #      validation-query: SELECT 'x'  FROM DUAL

      #配置初始化大小/最小/最大
      initial-size: 1
      min-idle: 1
      max-active: 20
      #获取连接等待超时时间
      max-wait: 60000
      #间隔多久进行一次检测，检测需要关闭的空闲连接
      time-between-eviction-runs-millis: 60000
      #一个连接在池中最小生存的时间
      min-evictable-idle-time-millis: 300000

      #druid相关配置
      #连接池中的minIdle数量以内的连接，空闲时间超过minEvictableIdleTimeMillis，则会执行keepAlive操作
      keep-alive: true
      #监控统计拦截的filters
      filters: stat
      # 建议配置为true，不影响性能，并且保证安全性。
      # 空闲检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
      test-while-idle: true
      # 用户从连接池借用连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
      test-on-borrow: false
      # 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
      test-on-return: false
      #打开PSCache，并指定每个连接上PSCache的大小。oracle设为true，mysql设为false。分库分表较多推荐设置为false
      pool-prepared-statements: false
      max-pool-prepared-statement-per-connection-size: 20
      #      type，目前没发现能起什么作用
      type: com.alibaba.druid.pool.DruidDataSource
    ###########################################################
    ###########################################################
    #      第二个数据源，可以跟第一个数据源一样，这里因为大多数项目都是默认一样
    secondary:
      name: secondary
      #      mysql的查询校验
      #      validation-query: SELECT 'x'
      #      oracle的查询校验
      #      validation-query: SELECT 'x'  FROM DUAL

      #配置初始化大小/最小/最大
      initial-size: 1
      min-idle: 1
      max-active: 20
      #获取连接等待超时时间
      max-wait: 60000
      #间隔多久进行一次检测，检测需要关闭的空闲连接
      time-between-eviction-runs-millis: 60000
      #一个连接在池中最小生存的时间
      min-evictable-idle-time-millis: 300000
      #druid相关配置
      #连接池中的minIdle数量以内的连接，空闲时间超过minEvictableIdleTimeMillis，则会执行keepAlive操作
      keep-alive: true
      #监控统计拦截的filters
      filters: stat
      # 建议配置为true，不影响性能，并且保证安全性。
      # 空闲检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
      test-while-idle: true
      # 用户从连接池借用连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
      test-on-borrow: false
      # 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
      test-on-return: false
      #打开PSCache，并指定每个连接上PSCache的大小。oracle设为true，mysql设为false。分库分表较多推荐设置为false
      pool-prepared-statements: false
      max-pool-prepared-statement-per-connection-size: 20
      #      type，目前没发现能起什么作用
      type: com.alibaba.druid.pool.DruidDataSource

  #elasticsearch配置
  ##TCP方式配置
  #spring.data.elasticsearch.cluster-name=elasticsearch
  #spring.data.elasticsearch.cluster-nodes=127.0.0.1:9300


  #kafka配置
  kafka:
    ## 对于每个topic，会发送到每个组一份，如果在同一个组内有多个机器，只会有一个机器收到消息
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    listener:
      missing-topics-fatal: false
#kafka配置

###########################################################
###########################################################
##  指定mybatis映射文件的地址，多数据源已经在java代码处理
mybatis:
  configuration:
    map-underscore-to-camel-case: false
###########################################################
###########################################################
logging:
  #  引入日志配置文件,logback的jar跟log4j2的jar不能共存，日志配置根据实际情况配置

  #  如果是使用jar方式启动
  #  config: classpath:config/logback-spring.xml
  config: file:./config/logback-spring.xml
  #  如果是使用外部web容器方式启动，使用该日志,但是不生效，只会读取类路径根目录下规范配置
  #  config: classpath:log4j2.xml

  #  配置包的日志打印等级
#  level:
#    com.latico.archetype.springboot.dao.secondary.mapper: DEBUG
###########################################################
###########################################################
#  是否启动swagger
swagger:
  show: true
###########################################################
###########################################################
#http编码配置
http:
  encoding:
    charset: UTF-8
    force: true
    enabled: true
###########################################################
###########################################################
#  helper-dialect：指定数据库，不指定的话会默认自动检测数据库类型
#  reasonable：是否启用分页合理化。如果启用，当pagenum<1时，会自动查询第一页的数据，当pagenum>pages时，自动查询最后一页数据；不启用的，以上两种情况都会返回空数据
#  support-methods-arguments：默认值false，分页插件会从查询方法的参数值中，自动根据上面 params 配置的字段中取值，查找到合适的值时就会自动分页。（copy来的，因为我也不知道怎么去解释）
#  params：用于从对象中根据属性名取值， 可以配置 pageNum,pageSize,count,pageSizeZero,reasonable，不配置映射的用默认值， 默认值为pageNum=pageNum;pageSize=pageSize;count=countSql;reasonable=reasonable;pageSizeZero=pageSizeZero
pagehelper:
  #  helper-dialect: mysql
  reasonable: true
  support-methods-arguments: true
  params:
  ###########################################################
  ###########################################################
#   连接springcloud注册中心相关配置
#客户端负载均衡配置，feign底层用的ribbon
ribbon:
  # 请求连接的超时时间
  ConnectTimeout: 10000
  # 请求处理的超时时间
  ReadTimeout: 60000
  # 对当前实例的重试次数
  maxAutoRetries: 1
  # 切换实例的重试次数
  maxAutoRetriesNextServer: 3
  # 对所有操作请求都进行重试
  okToRetryOnAllOperations: true
  # 对Http响应码进行重试
#  retryableStatusCodes: 500,404,502

#目前基本使用Feign都是与ribbon结合使用的，但是feign客户端超时的优先级高于ribbon，可以二配一即可
feign:
  client:
    config:
      default:
        connectTimeout: 10000
        readTimeout: 60000
eureka:
  instance:
    #客户端IP，因为假如存在多网卡，要明确使用某个网卡的IP跟服务端进行通信，默认是自动选择一个
    #    ip-address: 127.0.0.1
    preferIpAddress: true
    #springcloud上面显示本地客户端信息，建议是本机的IP，默认认为客户端程序跟服务端部署到同一个机器，所以跟注册中心一样
    instance-id: localhost:${spring.application.name}:${server.port}

    # 每隔10s发送一次心跳
    lease-renewal-interval-in-seconds: 10
    # 告知服务端30秒还未收到心跳的话，就将该服务移除列表
    lease-expiration-duration-in-seconds: 30
    #    eureka的管理页面中的注册客户端列表的status字段显示的内容，设置显示swagger
    statusPageUrlPath: /swagger-ui.html
  ###########################################################
  ###########################################################